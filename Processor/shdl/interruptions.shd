module interruptions(rst, clk, pwm_out, button[2..0], soft_int, handle_int: int_id[3..0])
  // pwm_out : signal pwm
  // button[2..0] : bouton de 1 à 4
  // handle_int : prise en compte de l'interruption de plus haute priorité
  // int_id : ID de l'interruption de plus haut niveau de priorité en attente

  rst_int_id[3..0] = handle_int*int_id[3..0];
  decoder4to16(rst_int_id[3..0], rst_int[15..0]);

  // interruption pwm
  frontMontant(rst, clk, pwm_out : int[1]);

  // interruption button[0]
  frontMontant(rst, clk, button[0] : int[2]);

  // interruption button[1]
  frontMontant(rst, clk, button[1] : int[3]);

  // interruption button[2]
  frontMontant(rst, clk, button[2] : int[4]);

  // RS-232
  int[5] = 0; // TODO

  // software interruption
  int[6] = soft_int;

  // les interruptions non mappées sont mises à 0
  int[0] = 0;
  int[15..7] = 0;

  int_mem[15..0] := /rst_int[15..0]*int_mem[15..0] + int[15..0]*/int_mem[15..0];
  int_mem[15..0].rst = rst;
  int_mem[15..0].clk = clk;

  encodeurpriorite16(int_mem[15..0]: int_id[3..0], act);
end module
