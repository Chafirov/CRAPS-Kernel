module micromachine(rst, clk, areg[4..0], breg[4..0], dreg[4..0], cmd_ual[5..0], oe_num[1..0], write, handle_int,
                    monitor[31..0], button[2..0], switch[7..0], swClk, ssgClk, pwmClk :
                    dbus[31..0], N, Z, V, C, ir[31..0], break, curr_int[3..0], waiting_int[3..0], leds[7..0], ssegs[7..0], anodes[3..0], pwm_out)
  // Arbitrage bus
  decoder2to4(oe_num[1..0], oe[3..0]);

  // UAL
  ual(abus[31..0], bbus[31..0], cmd_ual[5..0] : dbus_ual[31..0], setN, setZ, setVC, dN, dZ, dV, dC);
  dbus[31..0] = dbus_ual[31..0] : oe[1];

  // Registres
  registres(rst, clk, areg[4..0], breg[4..0], dreg[4..0], dbus[31..0], dN, dZ, dV, dC, setN, setZ, setVC, handle_int, waiting_int[3..0] : abus[31..0], bbus[31..0], ir[31..0], break, N, Z, V, C, curr_int[3..0]);

  // Interruptions
  interruptions(rst, clk, pwm_out, button[2..0], handle_int: waiting_int[3..0]);

  // Decodage des adresses
  decoder4to16(abus[31..28] : cs[15..0]);

  // RAM 32K (8192 mots de 32 bits)
  wrRam = write*cs[0];
  rams_read_through8192x32(clk, wrRam, abus[12..0], dbus[31..0], dbus_ram[31..0]) ;
  oe_ram = oe[2] * cs[0];
  dbus[31..0] = dbus_ram[31..0] : oe_ram;

  // Switches
  reg8(rst, swClk, 1, switch[7..0]: swDebounced[7..0]);
  oe_sw = oe[2] * cs[9];
  dbus[31..8] = 0 : oe_sw;
  dbus[7..0] = swDebounced[7..0] : oe_sw;

  // 7-segs
  wrSsg = write*cs[10];
  segs7(rst, clk, ssgClk, wrSsg, abus[0], dbus[15..0] : anodes[3..0], ssegs[7..0]);

  // Leds
  wrLd = write*cs[11];
  reg8(rst, clk, wrLd, dbus[7..0], leds[7..0]);

  // PWM
  wrPwm = write*cs[12];
  pwm_module(rst, clk, pwmClk, wrPwm, abus[0], dbus[15..0] : pwm_out);

  // Moniteur
  dbus[31..0] = monitor[31..0] : oe[3];
end module
