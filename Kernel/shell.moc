// replace the first space of the char by a null character, and return a
// pointer to the part after the null character that was added
char* parseline(char* line) {
    int i;
    for (i = 0; line[i] != ' ' && line[i] != '\0'; i=i+1)
    {}

    if (line[i] == '\0') {
        return line + i;
    }
    line[i] = '\0';
    return line + i + 1;
}

void load_command() {
    int i;

    // read size (in 32 bits words)
    int size = getint();

    // read file word per word
    int* file = (int*)malloc(size);

    for(i = 0; i < size; i=i+1) {
        *(file + i) = getint();
    }

    // write address to user
    char[12] addr_hex;
    itoha((int)file, addr_hex);
    write("File loaded at address ");
    write(addr_hex);
    putc('\n');
}

void shell(char* line) {
    char* parameters = parseline(line);

    if (line[0] == (char)3 /* ^C */ || strcmp(line, "quit")) {
        putc((char)4); // ^D
        putc('\n');
    }
    else if (strcmp(line, "echo")) {
        write(parameters);
        putc('\n');
    }
    else if (strcmp(line, "help")) {
        write("Commands: help, echo, run, kill, load, start_process, ps.\n");
    }
    else if(strcmp(line, "run")) {
        if(strcmp(parameters, "dummy")) {
            start_process(task_dummy, "dummy");
        }
        else if(strcmp(parameters, "leds")) {
            start_process(task_leds, "leds");
        }
        else if(strcmp(parameters, "counter")) {
            start_process(task_counter, "counter");
        }
        else {
            write("Usage: run dummy|leds|counter\n");
        }
    }
    else if(strcmp(line, "kill")) {
        int pid = atoi(parameters);

        if(pid == -1) {
            write("Usage: kill pid\n");
        }
        else {
            kill_process(pid);
        }
    }
    else if(strcmp(line, "load")) {
        load_command();
    }
    else if(strcmp(line, "start_process")) {
        int addr = atoi(parameters);

        if(addr == -1) {
            write("Usage: start_process addr\n");
        }
        else {
            start_process((void*) addr, "TODO");
        }
    }
    else if(strcmp(line, "ps")) {
        char[6] buff;
        int i;
        int nb;
        struct process_info_t[] info = processes_info(&nb);

        write("Process table:\n");
        for(i = 0; i < nb; i = i+1) {
            itoha(info[i].pid, buff);
            write(buff);
            write("  ");
            write(info[i].command);
            putc('\n');
        }

        free((void*)info);
    }
    else {
        write("Unknown command, try help.\n");
    }

    putc('\0'); // end of message
}
