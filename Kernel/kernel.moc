asm("
    ba start

    // interrupt table
    .word pwm_handler
    .word null_handler
    .word null_handler
    .word null_handler
    .word rs232_handler_read
    .word null_handler
    .word null_handler

null_handler: reti
start:
    set 0x1FFF, %sp // stack at the end of the memory
    ba f_main
")

// global variables

// every N PWM-interruptions we do a context switch, this is the counter
int pwm_count;

#define PROCESS_COUNT 4

struct process_table_t {
    int process_count;
    int current_process;
    void*[PROCESS_COUNT] stack_pointers;
};

struct process_table_t* process_table;

// implementation of the context switch
asm("
pwm_handler:
    push %r1

    ld $pwm_count, %r1
    inccc %r1

    // do we do a context switch, or nothing ?
    cmp %r1, 10
    bge pwm_handler_do_it

    st %r1, $pwm_count
    pop %r1
    reti

    ////////////////////
    // context switch //
    ////////////////////

pwm_handler_do_it:
    xor %r1, %r1, %r1 // reset the counter
    st %r1, $pwm_count

    push %r2
    push %r3
    push %r4
    push %r5
    push %r6
    push %r7
    push %r8
    push %r9
    push %r10
    push %r11
    push %r12
    push %r13
    push %r14
    push %r15
    push %r16
    push %r17
    push %r18
    push %r19
    push %fp
    push %r28 // @ret

    ld $process_table, %r2
    ld [%r2], %r3 // %r3: nb_tasks
    ld [%r2 + 1], %r4 // %r4: current_task
    add %r4, 2, %r5
    add %r5, %r2, %r5 // %r5: current task entry

    // store the stack pointer
    st %sp, [%r5]

    // now it is stored, we can load the other task

    // current_task = (current_task + 1) % nb_tasks
    inccc %r4
    cmp %r4, %r3
    bl pwm_handler_afterreset
    xor %r4, %r4, %r4 // %r4 <- 0
pwm_handler_afterreset:

    st %r4, [%r2 + 1]

    add %r4, 2, %r5
    add %r5, %r2, %r5 // %r5: current task entry

    // We switch the stack now that everything is pop'ed
    ld [%r5], %sp

    pop %r28 // @ret
    pop %fp
    pop %r19
    pop %r18
    pop %r17
    pop %r16
    pop %r15
    pop %r14
    pop %r13
    pop %r12
    pop %r11
    pop %r10
    pop %r9
    pop %r8
    pop %r7
    pop %r6
    pop %r5
    pop %r4
    pop %r3
    pop %r2
    pop %r1
    reti
")

#include "memory.moc"
#include "strings.moc"
#include "rs232.moc"
#include "tasks.moc"

int main() {
    pwm_count = 0;
    // /!\ Should be big enough not to overwrite the code !
    malloc_start = (void*)0x1000;
    *((int*)malloc_start) = 0;

    // process table
    process_table = (struct process_table_t*)malloc(sizeof(struct process_table_t));
    process_table->process_count = PROCESS_COUNT;
    process_table->current_process = 0;

    void*[PROCESS_COUNT] tasks;
    tasks[0] = task_dummy;
    tasks[1] = task_counter;
    tasks[2] = task_shell;
    tasks[3] = task_leds;

    // initialize all processes
    void*[] stack_pointers = process_table->stack_pointers;
    int i;
    int j;

    for (i=0; i < PROCESS_COUNT; i=i+1) {
        // we build the stack for the process i
        void* stack = malloc(256) + 255;

        // as a convention, we put on the stack the address of the first
        // instruction of the task (for "bootstraping" the processes)
        *((int*) stack) = (int)tasks[i];

        if (i > 0) {
            // fill the end of the stack of the processes that are waiting: they will
            // be restored by the scheduler!
            // we push %psr, %r1..%r19, %fp, %r28 (ret)
            for (j=0; j < 22; j=j+1) {
                stack = stack - 1;
                *((int*) stack) = 0;
            }
        }

        stack_pointers[i] = stack;
    }

    // PWM rising edge every milliseconds
    *((int*)0xC0000000) = 195; // P
    *((int*)0xC0000001) = 98; // N

    // first task: loads its stack and runs it
    void* sp = stack_pointers[0];
    asm("
        ld $sp, %sp
        ld [%sp], %pc
    ");
}

