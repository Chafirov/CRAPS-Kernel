asm("
    ba start

    // interrupt table
    .word pwm_handler
    .word null_handler
    .word null_handler
    .word null_handler
    .word rs232_handler_read
    .word null_handler
    .word softint_handler

null_handler: reti
start:
    set 0x1FFF, %sp // stack at the end of the memory
    ba f_main
")

#define PROCESS_COUNT 16

struct process_t {
    void* stack;
    void* args;
};

struct process_table_t {
    int current_process;
    struct process_t[PROCESS_COUNT] processes;
};

struct process_table_t process_table;

#include "panic.moc"
#include "memory.moc"
#include "scheduler.moc"
#include "strings.moc"
#include "rs232.moc"
#include "tasks.moc"
#include "softint.moc"

int main() {
    pwm_count = 0;
    // /!\ Should be big enough not to overwrite the code !
    malloc_start = (void*)0x1000;
    *((int*)malloc_start) = 0;

    // process table
    struct process_t[] processes = process_table.processes;
    process_table.current_process = 0;

    int i;
    for(i = 0; i < PROCESS_COUNT; i=i+1) {
        processes[i].stack = NULL;
        processes[i].args = NULL;
    }

    // initialize all processes
    _start_process(task_shell);

    // first task: loads its stack...
    processes[0].stack = processes[0].stack + NB_SAVED_REGISTERS; // pop all registers
    void* sp = processes[0].stack;

    // PWM rising edge every milliseconds
    *((int*)0xC0000000) = 195; // P
    *((int*)0xC0000001) = 98; // N

    // and run the first task
    asm("
        ld $sp, %sp
        ld [%sp], %pc
    ");
}

