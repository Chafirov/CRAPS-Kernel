// every N PWM-interruptions we do a context switch, this is the counter
int pwm_count;

#define PROCESS_COUNT 4

struct process_table_t {
    int process_count;
    int current_process;
    void*[PROCESS_COUNT] stack_pointers;
};

struct process_table_t* process_table;

#define NB_SAVED_REGISTERS 22

// implementation of the context switch
asm("
pwm_handler:
    push %r1

    ld $pwm_count, %r1
    inccc %r1

    // do we do a context switch, or nothing ?
    cmp %r1, 10
    bge pwm_handler_do_it

    st %r1, $pwm_count
    pop %r1
    reti

    ////////////////////
    // context switch //
    ////////////////////

pwm_handler_do_it:
    xor %r1, %r1, %r1 // reset the counter
    st %r1, $pwm_count

    push %r2
    push %r3
    push %r4
    push %r5
    push %r6
    push %r7
    push %r8
    push %r9
    push %r10
    push %r11
    push %r12
    push %r13
    push %r14
    push %r15
    push %r16
    push %r17
    push %r18
    push %r19
    push %fp
    push %r28 // @ret

    ld $process_table, %r2
    ld [%r2], %r3 // %r3: nb_tasks
    ld [%r2 + 1], %r4 // %r4: current_task
    add %r4, 2, %r5
    add %r5, %r2, %r5 // %r5: current task entry

    // store the stack pointer
    st %sp, [%r5]

    // now it is stored, we can load the other task

    // current_task = (current_task + 1) % nb_tasks
    inccc %r4
    cmp %r4, %r3
    bl pwm_handler_afterreset
    xor %r4, %r4, %r4 // %r4 <- 0
pwm_handler_afterreset:

    st %r4, [%r2 + 1]

    add %r4, 2, %r5
    add %r5, %r2, %r5 // %r5: current task entry

    // We switch the stack now that everything is pop'ed
    ld [%r5], %sp

    pop %r28 // @ret
    pop %fp
    pop %r19
    pop %r18
    pop %r17
    pop %r16
    pop %r15
    pop %r14
    pop %r13
    pop %r12
    pop %r11
    pop %r10
    pop %r9
    pop %r8
    pop %r7
    pop %r6
    pop %r5
    pop %r4
    pop %r3
    pop %r2
    pop %r1
    reti
")

void kill_process(int pid) {
    if(process_table->process_count < 2) {
        panic(4);
    }

    // Hack to wait for the current process not to be active.
    while(process_table->current_process == pid) {}

    // if we kill the process and it has malloc()'ed memory, it will be leaked :(
    // moreover, the current malloc implementation allow only to call free() with the base pointer.
    //free(process_table->stack_pointers[pid]);

    if(process_table->current_process > pid) {
        process_table->current_process = process_table->current_process - 1;
    }

    process_table->process_count = process_table->process_count - 1;

    int i;
    for(i = pid; i < process_table->process_count; i=i+1) {
        *((int*)process_table->stack_pointers + i) = *((int*)process_table->stack_pointers + i + 1);
    }
}

void start_process(void* start_addr) {
    if(process_table->process_count >= PROCESS_COUNT) {
        panic(1);
    }

    void* stack = malloc(256) + 255;

    // as a convention, we put on the stack the address of the first
    // instruction of the task (for "bootstraping" the processes)
    *((int*) stack) = (int)start_addr;

    int j;
    for(j=0; j < NB_SAVED_REGISTERS; j=j+1) {
        stack = stack - 1;
        *((int*) stack) = 0;
    }

    *((void**)process_table->stack_pointers + process_table->process_count) = stack;
    process_table->process_count = process_table->process_count + 1;
}
